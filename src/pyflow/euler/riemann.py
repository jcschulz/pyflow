import numpy as np

from .model import PrimitiveState, CaloricallyPerfectGas

class StarState:
    def __init__(self, left: PrimitiveState, right: PrimitiveState, Thermodynamics: CaloricallyPerfectGas):

        self.rhoL = left.density
        self.uL = left.speed
        self.pL = left.pressure

        self.rhoR = right.density
        self.uR = right.speed
        self.pR = right.pressure

        self.cL = Thermodynamics.speed_of_sound(self.rhoL, self.pL)
        self.cR = Thermodynamics.speed_of_sound(self.rhoR, self.pR)
        self.gamma = Thermodynamics.gamma

        self.TOLERANCE = 1.0e-7
        self.MAX_ITERATIONS = 100

    def find(self):
        u = 0
        p = self.__pressureGuess()

        u_diff = self.uR - self.uL
        dp = 1.0

        iteration = 0
        while iteration < self.MAX_ITERATIONS:
            F_left, dFdp_left = self.__pressureFunction(p, self.rhoL, self.cL, self.pL)
            F_right, dFdp_right = self.__pressureFunction(p, self.rhoR, self.cR, self.pR)

            p_next = p - (F_left + F_right + u_diff) / (dFdp_left + dFdp_right)

            dp = 2.0 * np.abs((p_next - p) / (p_next + p))

            p = p_next
            u = 0.5 * (self.uL + self.uR + F_right - F_left)

            iteration += 1
            if dp < self.TOLERANCE:
                break
        return p, u

    def __pressureFunction(self, p_star, rho, c, p):
        if p_star <= p:
            # Rarefaction wave
            p_ratio = p_star / p
            return (
                2.0 / (self.gamma - 1) * c * (p_ratio**((self.gamma - 1) / (2.0 * self.gamma)) - 1.0),
                p_ratio**(-(0.5*(self.gamma + 1.0)/self.gamma)) / (rho * c)
            )
        else:
            # Shock wave
            G_ratio = (self.gamma - 1.0) / (self.gamma + 1.0)
            mass_flux = np.sqrt(2.0 / (self.gamma + 1) / rho / (G_ratio * p + p_star))
            return (
                (p_star - p) * mass_flux,
                (1.0 - 0.5 * (p_star - p) / (G_ratio * p + p_star)) * mass_flux
            )

    def __pressureGuess(self):

        c_avg = 0.25 * (self.rhoL + self.rhoR) * (self.cL + self.cR)
        ppv = 0.5 * (self.pL + self.pR) + 0.5 * (self.uL - self.uR) * c_avg

        ppv = max(0, ppv)
        p_min = min(self.pL, self.pR)
        p_max = max(self.pL, self.pR)

        p_ratio = p_max / p_min

        if p_ratio <= 2.0  and p_min <= ppv and ppv <= p_max:
            return ppv

        else:
            if ppv < p_min:
                pq = (self.pL / self.pR)**((self.gamma - 1) / (2.0 * self.gamma))
                u_star = (
                    pq * self.uL / self.cL +
                    self.uR / self.cR +
                    2.0 / (self.gamma - 1) * (pq - 1.0)) / (pq / self.cL + 1.0 / self.cR
                )
                ptl = 1.0 + 0.5 * (self.gamma - 1.0) * (self.uL - u_star) / self.cL
                ptr = 1.0 + 0.5 * (self.gamma - 1.0) * (u_star - self.uR) / self.cR
                return 0.5 * (
                    self.pL * ptl**(2.0 * self.gamma / (self.gamma - 1)) +
                    self.pR * ptr**(2.0 * self.gamma / (self.gamma - 1)))
            else:
                G_ratio = (self.gamma - 1.0) / (self.gamma + 1.0)
                gel = np.sqrt((2.0 / (self.gamma + 1) / self.rhoL) / ( G_ratio * self.pL + ppv))
                ger = np.sqrt((2.0 / (self.gamma + 1) / self.rhoR) / ( G_ratio * self.pR + ppv))
                return (gel * self.pL + ger * self.pR - (self.uR - self.uL)) / (gel + ger)

class ExactRiemannSolver:
    def __init__(self, left: PrimitiveState, right: PrimitiveState, gamma: float = 1.4):
        self.gamma = gamma
        self.Thermodynamics = CaloricallyPerfectGas(gamma=gamma)

        self.rhoL = left.density
        self.uL = left.speed
        self.pL = left.pressure

        self.rhoR = right.density
        self.uR = right.speed
        self.pR = right.pressure

        self.cL = self.Thermodynamics.speed_of_sound(self.rhoL, self.pL)
        self.cR = self.Thermodynamics.speed_of_sound(self.rhoR, self.pR)

        # Check for presure positivity
        if 2.0 / (self.gamma - 1) * (self.cL + self.cR) <= self.uR - self.uL:
            raise RuntimeError('Vacuum is generated by Riemann Problem.')

        self.p_star, self.u_star = StarState(left, right, self.Thermodynamics).find()

    @staticmethod
    def rarefaction(gamma, rho, u, p, c, x_over_t):
        c_fan = (2.0 * c + (gamma - 1) * (u - x_over_t)) / (gamma + 1)
        return PrimitiveState(
            density = rho * (c_fan / c)**(2 / (gamma - 1)),
            speed = 2.0 / (gamma + 1) *(c + 0.5 * (gamma - 1) * u + x_over_t),
            pressure = p * (c_fan / c)**(2 * gamma / (gamma - 1)),
        )

    @staticmethod
    def shock_speed(gamma, u, c, p_ratio):
        return u - c * np.sqrt( 0.5 / gamma * ((gamma + 1) * p_ratio + (gamma - 1)))

    def left_rarefaction(self, x_over_t):
        return self.rarefaction(self.gamma, self.rhoL, self.uL, self.pL, self.cL, x_over_t)

    def right_rarefaction(self, x_over_t):
        return self.rarefaction(self.gamma, self.rhoR, self.uR, self.pR, -self.cR, x_over_t)

    def left_shock_speed(self):
        return self.shock_speed(self.gamma, self.uL, self.cL, self.p_star / self.pL)

    def right_shock_speed(self):
        return self.shock_speed(self.gamma, self.uR, -self.cR, self.p_star / self.pR)

    def density_shock_jump(self, rho, p):
        return rho * (
            (self.p_star / p + (self.gamma - 1)/(self.gamma + 1)) /
            (self.p_star / p * (self.gamma - 1)/(self.gamma + 1) + 1.0)
        )

    def density_rarefaction_jump(self, rho, p):
        return rho * (self.p_star / p)**(1.0 / self.gamma)

    def soundspeed_rarefaction_jump(self, c, p):
        return c * (self.p_star / p)**(0.5*(self.gamma - 1)/self.gamma)

    def sample(self, s):

        if s <= self.u_star:
            # Sampling point lies to the left of the contact discontinuity

            if self.p_star <= self.pL:
                # Left rarefaction
                if s <= self.uL - self.cL:
                    # Sampled point is left data state
                    return PrimitiveState(density=self.rhoL, speed=self.uL, pressure=self.pL)
                else:
                    # Sampled point is either inside the star state or inside the fan
                    if s > self.u_star - self.soundspeed_rarefaction_jump(self.cL, self.pL):
                        # Sampled point is the left star state
                        return PrimitiveState(
                            density=self.density_rarefaction_jump(self.rhoL, self.pL),
                            speed=self.u_star,
                            pressure=self.p_star)
                    else:
                        # Sampled point is inside the rarefaction fan
                        return self.left_rarefaction(s)
            else:
                # Left Shock
                if s <= self.left_shock_speed():
                    # Sampled point is left data state
                    return PrimitiveState(density=self.rhoL, speed=self.uL, pressure=self.pL)
                else:
                    # Sampled point is left start state
                    return PrimitiveState(
                        density = self.density_shock_jump(self.rhoL, self.pL),
                        speed = self.u_star,
                        pressure = self.p_star)
        else:
            # Sampling point lies to the right of the contact discontinuity
            if self.p_star > self.pR:
                # Right Shock
                if s >= self.right_shock_speed():
                    # Sampled point is right data state
                    return PrimitiveState(density=self.rhoR, speed=self.uR, pressure=self.pR)
                else:
                    # Sampled point is right star state
                    return PrimitiveState(
                        density = self.density_shock_jump(self.rhoR, self.pR),
                        speed = self.u_star,
                        pressure = self.p_star)
            else:
                # Right rarefaction
                if s >= self.uR + self.cR:
                    # Sampled point is left data state
                    return PrimitiveState(density=self.rhoR, speed=self.uR, pressure=self.pR)
                else:
                    # Sampled point is either inside the star state or inside the fan
                    if s <= self.u_star + self.soundspeed_rarefaction_jump(self.cR, self.pR):
                        # Sampled point is the left star state
                        return PrimitiveState(
                            density = self.density_rarefaction_jump(self.rhoR, self.pR),
                            speed = self.u_star,
                            pressure = self.p_star)
                    else:
                        # Sampled point is inside the rarefaction fan
                        return self.right_rarefaction(s)

